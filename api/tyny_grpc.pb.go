// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TynyClient is the client API for Tyny service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TynyClient interface {
	// Gets a redirect
	GetRedirect(ctx context.Context, in *GetRedirectRequest, opts ...grpc.CallOption) (*Redirect, error)
	// Lists redirects
	ListRedirects(ctx context.Context, in *ListRedirectsRequest, opts ...grpc.CallOption) (*ListRedirectsResponse, error)
	// Creates a redirect
	CreateRedirect(ctx context.Context, in *CreateRedirectRequest, opts ...grpc.CallOption) (*Redirect, error)
	// Updates a redirect
	UpdateRedirect(ctx context.Context, in *UpdateRedirectRequest, opts ...grpc.CallOption) (*Redirect, error)
	// Deletes a redirect
	DeleteRedirect(ctx context.Context, in *DeleteRedirectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tynyClient struct {
	cc grpc.ClientConnInterface
}

func NewTynyClient(cc grpc.ClientConnInterface) TynyClient {
	return &tynyClient{cc}
}

func (c *tynyClient) GetRedirect(ctx context.Context, in *GetRedirectRequest, opts ...grpc.CallOption) (*Redirect, error) {
	out := new(Redirect)
	err := c.cc.Invoke(ctx, "/api.tyny/GetRedirect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tynyClient) ListRedirects(ctx context.Context, in *ListRedirectsRequest, opts ...grpc.CallOption) (*ListRedirectsResponse, error) {
	out := new(ListRedirectsResponse)
	err := c.cc.Invoke(ctx, "/api.tyny/ListRedirects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tynyClient) CreateRedirect(ctx context.Context, in *CreateRedirectRequest, opts ...grpc.CallOption) (*Redirect, error) {
	out := new(Redirect)
	err := c.cc.Invoke(ctx, "/api.tyny/CreateRedirect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tynyClient) UpdateRedirect(ctx context.Context, in *UpdateRedirectRequest, opts ...grpc.CallOption) (*Redirect, error) {
	out := new(Redirect)
	err := c.cc.Invoke(ctx, "/api.tyny/UpdateRedirect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tynyClient) DeleteRedirect(ctx context.Context, in *DeleteRedirectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.tyny/DeleteRedirect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TynyServer is the server API for Tyny service.
// All implementations must embed UnimplementedTynyServer
// for forward compatibility
type TynyServer interface {
	// Gets a redirect
	GetRedirect(context.Context, *GetRedirectRequest) (*Redirect, error)
	// Lists redirects
	ListRedirects(context.Context, *ListRedirectsRequest) (*ListRedirectsResponse, error)
	// Creates a redirect
	CreateRedirect(context.Context, *CreateRedirectRequest) (*Redirect, error)
	// Updates a redirect
	UpdateRedirect(context.Context, *UpdateRedirectRequest) (*Redirect, error)
	// Deletes a redirect
	DeleteRedirect(context.Context, *DeleteRedirectRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTynyServer()
}

// UnimplementedTynyServer must be embedded to have forward compatible implementations.
type UnimplementedTynyServer struct {
}

func (UnimplementedTynyServer) GetRedirect(context.Context, *GetRedirectRequest) (*Redirect, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedirect not implemented")
}
func (UnimplementedTynyServer) ListRedirects(context.Context, *ListRedirectsRequest) (*ListRedirectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRedirects not implemented")
}
func (UnimplementedTynyServer) CreateRedirect(context.Context, *CreateRedirectRequest) (*Redirect, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRedirect not implemented")
}
func (UnimplementedTynyServer) UpdateRedirect(context.Context, *UpdateRedirectRequest) (*Redirect, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRedirect not implemented")
}
func (UnimplementedTynyServer) DeleteRedirect(context.Context, *DeleteRedirectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRedirect not implemented")
}
func (UnimplementedTynyServer) mustEmbedUnimplementedTynyServer() {}

// UnsafeTynyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TynyServer will
// result in compilation errors.
type UnsafeTynyServer interface {
	mustEmbedUnimplementedTynyServer()
}

func RegisterTynyServer(s grpc.ServiceRegistrar, srv TynyServer) {
	s.RegisterService(&Tyny_ServiceDesc, srv)
}

func _Tyny_GetRedirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRedirectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TynyServer).GetRedirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tyny/GetRedirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TynyServer).GetRedirect(ctx, req.(*GetRedirectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tyny_ListRedirects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRedirectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TynyServer).ListRedirects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tyny/ListRedirects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TynyServer).ListRedirects(ctx, req.(*ListRedirectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tyny_CreateRedirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRedirectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TynyServer).CreateRedirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tyny/CreateRedirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TynyServer).CreateRedirect(ctx, req.(*CreateRedirectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tyny_UpdateRedirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRedirectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TynyServer).UpdateRedirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tyny/UpdateRedirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TynyServer).UpdateRedirect(ctx, req.(*UpdateRedirectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tyny_DeleteRedirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRedirectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TynyServer).DeleteRedirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tyny/DeleteRedirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TynyServer).DeleteRedirect(ctx, req.(*DeleteRedirectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tyny_ServiceDesc is the grpc.ServiceDesc for Tyny service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tyny_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.tyny",
	HandlerType: (*TynyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRedirect",
			Handler:    _Tyny_GetRedirect_Handler,
		},
		{
			MethodName: "ListRedirects",
			Handler:    _Tyny_ListRedirects_Handler,
		},
		{
			MethodName: "CreateRedirect",
			Handler:    _Tyny_CreateRedirect_Handler,
		},
		{
			MethodName: "UpdateRedirect",
			Handler:    _Tyny_UpdateRedirect_Handler,
		},
		{
			MethodName: "DeleteRedirect",
			Handler:    _Tyny_DeleteRedirect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tyny.proto",
}
